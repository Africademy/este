# https://github.com/este/este/wiki/GraphQL
# Workflow:
#   - update model.graphql
#   - add resolver
#   - test it in playground
#   - restart `yarn dev` in first terminal window
#   - run `yarn codegen` in another terminal window
# TODO: Ideally, run `yarn codegen` after nodemon.api.json restart invoked by
# model.graphql change. PR anyone?

# import User, Web, Page from "../../database/schema.graphql"
# import * from "./errors.graphql"

input AuthInput {
  email: String!
  password: String!
  isSignUp: Boolean!
}

type AuthErrors {
  email: EmailError
  password: PasswordError
}

type AuthPayload {
  errors: AuthErrors
  token: String
  user: User
}

input CreateWebInput {
  name: String!
  pageTitle: String!
}

type CreateWebErrors {
  name: Max140CharsError
  pageTitle: Max140CharsError
}

type CreateWebPayload {
  errors: CreateWebErrors
  pageId: ID
}

input DeleteWebInput {
  id: ID!
}

type DeleteWebPayload {
  web: Web
}

input SetThemeInput {
  themeName: String!
}

type SetThemePayload {
  user: User
}

input SetPageTitleInput {
  id: ID!
  title: String!
}

type SetPageTitleErrors {
  title: Max140CharsError
}

type SetPageTitlePayload {
  errors: SetPageTitleErrors
  page: Page
}

input SetWebNameInput {
  id: ID!
  name: String!
}

type SetWebNameErrors {
  name: Max140CharsError
}

type SetWebNamePayload {
  errors: SetWebNameErrors
  web: Web
}

input SetPageContentInput {
  id: ID!
  content: String!
}

type SetPageContentPayload {
  page: Page
}

input DeletePageInput {
  id: ID!
}

type DeletePagePayload {
  page: Page
}

type Mutation {
  auth(input: AuthInput!): AuthPayload
  createWeb(input: CreateWebInput!): CreateWebPayload
  deleteWeb(input: DeleteWebInput!): DeleteWebPayload
  setTheme(input: SetThemeInput!): SetThemePayload
  setPageTitle(input: SetPageTitleInput!): SetPageTitlePayload
  setWebName(input: SetWebNameInput!): SetWebNamePayload
  setPageContent(input: SetPageContentInput!): SetPageContentPayload
  deletePage(input: DeletePageInput!): DeletePagePayload
}

# Queries do not need inputs nor payloads. They are pretty explicit.
type Query {
  me: User
  page(id: ID!): Page
  web(id: ID!): Web
}
